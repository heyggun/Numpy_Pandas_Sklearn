# -*- coding: utf-8 -*-
"""numby_array.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13RF19x8i6VjmiYAWUhhYGGiJt7MCi0vq
"""

import numpy as np

ar = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
ar

type(ar)

import numpy as np

ar = np.array([0,1,2,3,4,5])
ar

type(ar)

data = [0, 1, 2, 3, 4, 5]

ans = []

for da in data:
  ans.append(2*da)

ans

x = np.array(data)
x

2*x

lst = [0,1,2,3,4,5]

print(2*lst)

a = np.array([1,2,3])
b = np.array([10,20,30])

2*a+b

a == 2

b > 10

(a == 2) & (b>10)

# 2차원 배열 만들기
# 2개의 행과 3개의 열을 가지는 2x3배열

c = np.array([[0,1,2], [3,4,5]]) # 2x3 array
c

len(c) # 2차원 배열의 행의 수

len(c[0]) # 2차원 배열의 열의 수

ex1 = np.array([[10,20,30,40],[50,60,70,80]])
ex1

# 3차원 배열 만들기 (2x3x4)

d = np.array([[[1,2,3,4],[5,6,7,8],[9,10,11,12]],[[11,12,13,14],[15,16,17,18],[19,20,21,22]]])
d

len(d),len(d[0]),len(d[0][0]) # 3차원 배열의 깊이, 행, 열

# 배열의 차원과 크기 알아내기

a = np.array([0,1,2])

print(a.ndim) #배열의 차원
print(a.shape) #배열의 크기

c = np.array([[0,1,2],[3,4,5]])
print(c.ndim) #배열의 차원
print(c.shape) #배열의 크기

print(d.ndim)
print(d.shape)

# 배열의 인덱싱

a = np.array([0,1,2,3,4])
a[2]

a = np.array([0,1,2,3,4])
a[-1]

a = np.array([[0,1,2,], [3,4,5]])
a

a[0,0] # 첫 번째 행의 첫째 열

a[0,1] # 첫 번째 행의 두번째 열

a[-1,-1] # 마지막 행의 마지막 열

a[1,1]

# 배열 슬라이싱

a = np.array([[0,1,2,3],[4,5,6,7]])
a

a[0, :] #첫 번째 행 전체

a[:, 1] # 두 번째 열 전체

a[1, 1:] # 두 번째 행의 두 번째 열 부터 끝 열까지

a[0, 1:] # 첫 번째 행의 두 번째 열 부터 끝 열 까지

a[:2, :2]

m = np.array([[0,1,2,3,4],[5,6,7,8,9],[10,11,12,13,14]])

print(m.ndim)
print(m.shape)
print(len(m))
print(len(m[0]))

print(m[1,2])
print(m[-1,-1])
print(m[1,1:3])
print(m[:2,3:])

# 배열 인덱싱

a = np.array([0,1,2,3,4,5,6,7,8,9])
idx = np.array([True,False,True,False,True,False,True,False,True,False])

a[idx]

a%2

a % 2 ==0

a[a%2 ==0]

# 정수 배열 인덱싱에서는 인덱스 배열의 원소 각각이 원래 
# ndarray 객체 원소 하나를 가리키는 인덱스 정수이여야 함

# 1차원 배열에서 홀수번째 원소만 골라내는 것

a = np.array([11, 22, 33, 44, 55, 66, 77, 88, 99])
idx = np.array([0,2,4,6,8])
a[idx]

# 같은 원소를 반복해서 가르키는 경우에는 배열 인덱스가 원래의 배열보다 더 커짐

a = np.array([11, 22, 33, 44, 55, 66, 77, 88, 99])
idx = np.array([0,0,0,0,0,0,1,1,1,1,2,2,2,2])
a[idx]

#배열 인덱싱은 다차원 배열의 각 차원에 대해서도 할 수 있음

a = np.array([[1,2,3,4],[5,6,7,8], [9,10,11,12]])
a

print(a.ndim)
print(a.shape)
print(len(a))
print(len(a[0]))

a[:, [True, False, False, True]]

a[[0,2,1], 1:3]

# ex 3
x = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])

x[x%3==0]

x[x%4==1]

x[(x%3==0) & (x%4==1)]

)