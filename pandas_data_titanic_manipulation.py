# -*- coding: utf-8 -*-
"""Pandas_Data_titanic_Manipulation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rkPDYYtAbfcMFPXOmJrrcwc-1iEyuNID
"""

import pandas as pd
import numpy as np

import seaborn as sns

titanic = sns.load_dataset("titanic")
titanic.head()

# sort_values 메서드를 사용하여 타이타닉호 승객에 대해 성별(sex) 인원수,
# 나이별(age) 인원 수, 선실별(class) 인원 수, 사망/생존(alive) 인원수는?

titanic["sex"].value_counts()

titanic["age"].value_counts().sort_index()

titanic["class"].value_counts().sort_index()

titanic["alive"].value_counts()

# ex 1) 타이타닉호 승객의 평균 나이
# 2) 승객 중 여성 승객의 평균 나이
# 3) 승객 중 1등실 선실의 여성 승객 나이의 평균 나이

titanic.head()

titanic["age"].mean()

titanic.loc[titanic.sex == "female"]["age"].mean()

titanic.loc[(titanic['sex'] == "female") & (titanic["class"] == "First")]["age"].mean()

# 타이타닉호의 승객 중 나이 20살을 기준으로 성인(adult)와 미성년자(child)를 구별하는 라벨 열

titanic["adult/child"] = titanic.apply(lambda r : "adult" 
                                       if r.age >= 20 else "child", axis=1)
titanic.tail()

# ex : 타이타닉호의 승객에 대해 나이와 성별에 의한 카테고리 열 category1 열 만들기 
# ex1) 20살이 넘으면 성별을 그대로 사용
# ex2) 20살 미만이면 성별에 관계없이 'child'라고 함

titanic["category1"] = titanic.apply(lambda r: "child" if r.age < 20 else r.sex, axis=1)

titanic.tail()

# 타이타닉호의 승객 중 나이를 명시하지 않은 고객은
# 나이를 명시한 고객의 평균 나이 값이 되도록 titanic 데이터 프레임 고치기

age_mean = titanic["age"].mean()
print(age_mean)

titanic["age"].fillna(age_mean, inplace=True)
titanic.tail()

# ex. 타이타닉호의 승객에 나이와 성별에 의한 카테고리 category2 열 만들기
# category2 는 1) 성별을 나타내는 문자열 male 또는 female로 시작
# 성별을 나타내는 문자열 뒤에 나이를 나타내는 문자열이 옴
# 예를 들어 27살 남성은 male27이 됨

titanic["age"] = titanic["age"].astype(float)
titanic["age"] = titanic["age"].astype(int)
titanic["age"] = titanic["age"].astype(str)

titanic["category2"] = titanic[["sex","age"]].apply(''.join,axis=1)
titanic

bins = [1, 20, 30, 50, 70, 100]
labels = ["미성년자", "청년", "중년", "장년", "노년"]
cats = pd.cut(ages, bins, labels=labels)
cats

# 타이타닉호 승객을 '미성년자' , '청년', '중년', '장년', '노년' 나이 그룹으로 나눈다.
# bins =[ 1,20, 30, 50, 70, 100]
# labels = ["미성년자", "청년", "중년", "장년", "노년"]

bins = [0, 20, 30, 50, 70, 100]
labels = ["미성년자", "청년", "중년", "장년", "노년"]

rate_age = sum(titanic["age"].value_counts())

age_cats= pd.cut(titanic["age"], bins, labels=labels)
age_cats

print((age_cats.value_counts()/rate_age)*100)

# 타이타닉호의 승객에 대해 나이와 성별에 의한 카테고리 열인 category3 만들기
# 20살 미만이면 성별에 관계없이 "미성년자"
# 20살 이상이면 나이에 따라 "청년"."중년","장년",:노년" 구분, 뒤에 성별을 나타내는 "남성" 여성"

titanic["category3"] = titanic[["age","sex"]]

titanic.loc[0, :]['age']

titanic.isnull(

titanic

titanic['age'].fillna(titanic.age.mean(), inplace = True)
titanic.apply(lambda x: str(x['embarked']) + str(x['age']) if x['age'] >= 20 else x['embarked'], axis=1)

titanic['age_cat'] = age_cats

titanic

titanic['age'] = titanic['age'].astype(int)

titanic["category3"] = titanic[["age_cat","sex","age"]].apply(lambda x:x.age_cat + x.sex if x['age'] >=20 else "미성년자", axis=1)

titanic["category3"] = titanic.apply(lambda x: x.age_cat + x.sex if x['age'] >= 20 
                                                        else "미성년자",axis=1)

titanic["sex_cat"] = titanic

sex_cat = titanic["sex"].map({"female":"여성", "male" : "남성"})
titanic["sex_cat"] = sex_cat
titanic

def custom(x):
  if x["sex"] == "female" and x["age_cat"] != "미성년자":
    return x["age_cat"] + "여성"
  elif x["sex"] == "male" and x["age_cat"] != "미성년자":
    return x["age_cat"] + "남성"
  else:
    return x["age_cat"]

titanic[["sex", "age_cat"]].apply(lambda x: custom(x), axis = 1)

titanic[["sex", "age_cat"]].apply(lambda x : x["age_cat"] + "여성" if x["sex"] == "female" else x["age_cat"] + "남성", axis = 1)