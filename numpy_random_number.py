# -*- coding: utf-8 -*-
"""Numpy_random number

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bNr0TkOpoLgGtw-dCZc8N0C7LhTIeAYi
"""

import numpy as np

# 난수 발생과 카운팅

# 파이썬을 이용하여 데이터를 무작위로 섞거나 임의의 수, 
# 즉, 난수(random number)를 발생시키는 방법 
# NumPy의 random 서브패키지에서 제공한다.

# 시드설정하기

# 컴퓨터 프로그램에서 발생하는 무작위 수는 사실, 엄격한 의미의 무작위 수가 아니다.
# 어떤 특정한 시작 숫자를 정해 주면 컴퓨터가 정해진 알고리즘에 의해 마치 난수처럼 보이는 수열을 생성한다.
# 이런 시작 숫자를 시드(seed)라고 한다. 일단 생성된 난수는 다음번 난수 생성을 위한 시드값이 된다.
# 따라서 시드값은 한 번만 정해주면 된다.
# 시드는 보통 현재 시각등을 이용하여 자동으로 정해지지만 사람이 수동으로 설정할 수도 있다.
# 특정한 시드값이 사용되면 그 다음에 만들어지는 난수들은 모두 예측할 수 있다.
# 여기서는 코드의 결과를 재현하기 위해 항상 시드를 재정하고 있다.
# 파이썬에서 시드를 설정하는 함수는 seed 이다.
# 인수로는 0과 같거나 큰 정수를 넣어준다.

np.random.seed(0)

# 넘파이 random 서브패키지에 있는 rand 함수로 5개의 난수를 생성
# rand 함수는 0과 1사이의 난수를 발생하는 함수로, 인수로 받은 숫자 횟수만큼 난수 발생

np.random.rand(5)

np.random.rand(10)

# 시드 0으로 재설정, 난수 다시 발생

np.random.seed(0)

np.random.rand(5)

np.random.rand(10)

np.random.rand(10)

# 데이터의 순서 바꾸기

x = np.arange(10)
x

np.random.shuffle(x)
x

# 데이터 샘플링

# 이미 있는 데이터 집합에서 일부를 무작위로 선택하는 것을 표본선택 혹은 샘플링(sampling)이라 함
# 샘플링에는 choice 함수를 사용함. choice  함수는 다음과 같은 인수를 가질 수 있따.
# numpy.random.choice(a, size=None, replace=True, p=None)

# a : 배열이면 원래의 데이터, 정수이면 arange(a) 명령으로 데이터 생성
# size : 정수, 샘플 숫자
# replece : 불리언. True 이면 한번 선택한 데이터를 다시 선택 가능
# p : 배열, 각 데이터가 선택될 수 있는 확률

np.random.choice(5,5, replace=False) # shuffle 명령과 같음

np.random.choice(5,5, replace=True)

np.random.choice(5,3, replace=False) # 3개만 선택

np.random.choice(5,10) # 반복하여 10개 선택

np.random.choice(5, 10, p=[0.1, 0, 0.3, 0.6, 0]) # 선택확률을 다르게 해서 10개 선택

# 난수 생성

# 넘파이의 random 서브패키지는 이외에도 난수를 생성하는 다양한 함수를 제공한다.
# 그중 가장 간단하고 많이 사용되는 것은 다음 3가지 함수이다.

# rand : 0부터 1 사이의 균일 분포
# randn : 표준 정규 분포
# randint : 균일 분포의 정수 난수

# rand 함수는 0부터 1사이에서 균일한 확률 분포로 실수 난수를 생성한다.
# 숫자 인수는 생성할 난수의 크기이다. 여러개의 인수를 넣으면 해당 크기를 가진 행렬을 생성한다.

np.random.rand(10)

# randn 함수는 기댓값이 0이고 표준편차가 1인 표준 정규 분포(standard normal distribution)을 따르는 난수를 생성함
# 인수 사용법은 rand 명령과 같다.

np.random.randn(10)

np.random.randn(3,5)

# randint 함수는 다음과 같은 인수를 가짐

# numpy.random.randint(low, high=None, size=None)

# 만약 high를 입력하지 않으면 0과 low 사이의 숫자를,
# high를 입력하면 low와 high는 사이의 숫자를 출력함
# size는 난수의 숫자이다.

np.random.randint(10, size=10)

np.random.randint(10, 20, size=(3,5))

# ex1. 동전을 10번 던져 앞면(숫자 1)과 뒷면(숫자 0)이 나오는 가상 실험을 파이썬으로 작성

np.random.randint(0,2, size=10)

# 주사위를 100번 던져서 나오는 숫자의 평균

a = np.random.randint(1,6, size=100)
print(a)

np.mean(a)

# 가격이 10,000인 주식이 있음, 이 주식의 일간 수익률(%)은 기댓값이 0%고, 
# 표준편차가 1%인 표준 정규 분포를 따른다고 할 때, 250일 동안의 주가를 무작위로 생성

b = np.random.seed(10000)

b = np.random.randn(250)
print(b)

# 정수 데이터 카운팅

# 이렇게 발생시킨 난수가 실수값이면 히스토그램 등을 사용하여 분석함.
# 만약 난수가 정수값이면 unique 명령이나, bincount 명령으로 데이터 값을 분석할 수 있음
# unique 함수는 데이터에서 중복된 값을 제거, 중복되지 않는 값의 리스트 출력
# return_counts 인수를 True 로 설정하면 각 값을 가진 데이터 갯수도 출력함

np.unique([11,11,2,2,34,34])

a = np.array(['a', 'b', 'b', 'c', 'a'])
index, count = np.unique(a, return_counts=True)

print(index)
print(count)

# 그러나 unique 함수는 데이터에 존재하는 값에 대해서만 갯수를 세므로 
# 데이터 값이 나올 수 있음에도 불구하고 데이터가 하나도 없는 경우에는 정보를 주지 않음
# 예를 들어 주사위를 10번 던졌는데 6이 한 번도 나오지 않으면 이 값을 0으로 세워주지 않음

# 따라서 데이터가 주사위를 던졌을 때 나오는 수 처럼 특정 범위안의 수 인 경우에는
# bincount 함수에 minlength 인수를 설정하여 쓴느 것이 더 편리
# bincount 함수는 0 부터 minlength-1까지의 숫자에 대해 각각 카운트를 함, 
# 데이터가 없을 경우에는 카운트 값이 0이 됨



np.bincount([1,1,2,2,3], minlength=6)

