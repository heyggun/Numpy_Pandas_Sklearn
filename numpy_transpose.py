# -*- coding: utf-8 -*-
"""Numpy_transpose.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uss6sK6s8_wHUt_Oywb46PAqOlBtWnky
"""

# 2차원 배열의 전치(transpose) 연산은 행과 열을 바꾸는 작업니다.
# 이는 배열의 T속성으로 구할 수 있다. 
# 메서드가 아닌 속성이다 (유의)

import numpy as np

A = np.array([[1,2,3], [4,5,6]])
A

A.T

# 배열의 크기 변형

# 만들어진 배열의 내부 데이터는 보존한 채로 형태로 바꾸려면,
# reshape 명령이나 메서드를 사용한다. 
# 예를 들어 12개의 원소를 가진 1차원 행렬은 3x4 형태의 2차원 행렬로 만들 수 있다

a = np.arange(12)
a

b = a.reshape(3,4)
b

# 사용하는 원소의 갯수가 정해져 있기 때문에 reshape 명령의 형태 튜플의 원소 중 하나는
# -1이라는 숫자로 대체할 수 있음. -1을 넣으면 해당 숫자는 다른 값에서 계산되어 사용됨

a.reshape(3,-1)

a.reshape(2,2,-1)

a.reshape(2,-1,2)

# 다차원 배열을 무조건 1차원으로 만들기 위해서는 flatten 이나 ravel 메서드 사용

a.flatten()

a.ravel()

# 배열 사용에서 주의할 점 : 길이가 5인 1차원 배열과
# 행,열의 갯수가 (5,1)인 2차원 배열 또는
# 행,열의 갯수가 (1,5)인 배열은 데이터가 같아도 엄연히 다른 객체다

x = np.arange(5)
x

x.reshape(1,5)

x.reshape(5,1)

# 이렇게 같은 배열에 대해 차원만 1차원 증가시키는 경우에는 
# newaxis 명령을 사용함

x[:, np.newaxis]

#배열 연결
# 행의 수나 열의 수가 같은 두 개 이상의 배열을 연결(concatenate)하여
# 더 큰 배열을 만들 수 있다.

# hstack, vstack, dstack, stack, r_, c_, tile

#hstack 명령은 행의 수가 같은 두 개 이상의 배열을 
# 옆으로 연결하여, 열의 수가 더 많은 배열을 만든다.
# 연결할 배열은 하나의 리스트에 담아야 한다.

a1 = np.ones((2,3))
a1

a2 = np.zeros((2,2))
a2

np.hstack([a1,a2])

# vstack 명령은 열의 수가 같은 두 개 이상의 배열을 위아래로 연결하여
# 행의 수가 더 많은 배열을 만든다. 연결할 배열은 마찬가지로 하나의 리스트에 담는다.

b1 = np.ones((2,3))
b1

b2 = np.zeros((3,3))
b2

np.vstack([b1,b2])

# dstack 명령은 제3의축 즉, 행이나 열이 아닌 깊이(depth) 방향으로 배열을 합친다.
# 가장 안쪽의 차원이 증가한다. 즉, 가장 내부의 숫자 원소가 배열이 된다.
# shpae 정보로 보자면 가장 끝에 값이 2인 차원이 추가되는 것이다.
# 아래의 예제는 shape 변화가 2개의(3x4) -> 1개의 (3x4x2) 가 된다.

c1 = np.ones((3,4))
c1

c2 = np.zeros((3,4))

np.dstack([c1,c2])

np.dstack([c1,c2]).shape

# stack 명령은 dstack의 기능을 확장한 것으로 dstack 처럼 마지막 차원으로 연결하는 것이 아닌,
# 사용자가 지정한 차원(축으로) 배열을 연결함
# axis 인수(디폴트 0)를 사용하여 연결 후의 회전 방향을 정한다.
# 디폴스 인수값은 0이고 가장 앞쪽에 차원이 생성된다.
# 즉, 배열 두개가 겹치게 되므로 연결하고자 하는 배열의 크기가 모두 같아야 한다.

# axis=0 이므로 가장 바깥의 값이 2인 차원이 추가됨
# 즉 shape의 변화는 2개의 (3x4) -> 1개의 (2x3x4) 임

c = np.stack([c1,c2])
c

c.shape

# axis 인수가 1이면 두 번째 차원으로 새로운 차원이 삽입됨
# 다음 예에서 shape의 변화는 2개의 (3x4) 에서 1개의 (3x2x4)이다

c = np.stack([c1,c2], axis=1)
c

c.shape

# r_ 메서드는 hstack 명령과 비슷하게 배열을 좌우로 연결함
# 다만, 메서드임에도 불구하고 소괄호(parenthesis, ())을 사용하지 않고,
# 인덱싱과 같이 대괄호(bracke, [])를 사용한다. 
# 이런 특수 메서드를 인덱서(indexer) 라고 한다.

np.r_[np.array([1,2,3]), np.array([4,5,6])]

# c_ 메서드는 배열의 차원을 증가시킨 후 좌우로 연결한다.
# 만약에 1차원 배열을 연결하면 2차원 배열이 된다.

np.c_[np.array([1,2,3]), np.array([4,5,6])]

#tile 명령은 동일한 배열을 반복하여 연결함

a = np.array([[0,1,2], [3,4,5]])
np.tile(a,2)

np.tile(a, (3,2))

a

np.tile(a,(2,2))

# 연습문제 3.2.1

ex1 = np.zeros([3,3])
print(ex1)
ex2 = np.ones([3,2])
print(ex2)

ex3 = np.hstack([ex1, ex2])
ex3

ex4 = np.arange(10,160,10)
ex4 = ex4.reshape(3,5)
ex4

ex5 = np.vstack([ex3,ex4])
ex5

np.tile(ex5, (2,1))

# 2차원 그리드 포인트 생성

#변수가 2개인 2차원 함수의 그래프를 그리거나, 표를 작성하려면 2차원 영역에 대한 (x,y) 좌표값 쌍,
# 즉, 그리드 포인트(grid point)를 생성하여 각 좌표에 대한 함수 값을 계산해야 한다.
# 예를 들어 x,y 라는 두 변수를 가진 함수에서 x가 0부터 2까지, y가 0부터 4까지의 사각형 영역에서
# 변화하는 과정을 보고 싶다면 이 사각형 영역 안의 다음과 같은 그리드 포인트 들에 대해 함수를 계산 해야 한다
# (x,y) = (0,0), (0,1), (0,2), (0,3), (0,4), (1,0), ... , (2,4)

# 이러한 그리드 포인트를 만드는 과정을 도와주는 것이 meshgrid 명령이다.
# meshgrid 명령은 사각형 영역을 구성하는 가로축의 점들과 세로축의 점을 나타내는
# 두 벡터를 인수로 받아서 이 사각형 영역을 이루는 조합을 출력한다.
# 결과는 그리드 포인트의 x값 만을 표시하는 행렬과 y 값만을 표시하는 행렬 두 개로 분리하여 출력한다.

x = np.arange(3)
print(x)
x_ = np.arange(4)
print(x_)

y = np.arange(5)
y

X,Y = np.meshgrid(x,y)
X1,Y1 = np.meshgrid(x_,y)
print(X)
print(Y)
print(Y1)

[list(zip(x,y)) for x,y in zip(X,Y)]

