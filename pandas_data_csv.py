# -*- coding: utf-8 -*-
"""Pandas_Data_csv.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dlYiG_OqAGNOxZ9Nc3_t79CQIRJo-Ls5
"""

import pandas as pd
import numpy as np

data = {"국어" : [80,90,70,30],
        "영어" : [90,70,60,40],
        "수학" : [90,60,80,70]}
columns = ["국어", "영어", "수학"]
index = ["춘향", "몽룡", "향단", "방자"]

df = pd.DataFrame(data, index=index, columns=columns)
df

# (1) 모든 학생의 수학 점수를 시리즈로
df["수학"]

# (2) 모든 학생의 국어와 영어 점수를 데이터 프레임으로
df[["국어","영어"]]

# (3) 모든 학생의 각 과목 평균 점수를 새로운 열로 추가
df["평균 점수"] = ((df["국어"] + df["영어"] + df["수학"])/3).round(1)
df

# (4) 방자의 영어 점수를 80점으로 수정하고, 평균 점수도 다시 계산한다.
df["영어"]["방자"] = 80
df

df["평균 점수"] = ((df["국어"] + df["영어"] + df["수학"])/3).round(1)
df

# (5) 춘향의 점수를 데이터 프레임으로 나타낸다.

df[:1]

# (6) 향단의 점수를 시리즈로 나타낸다.

df2 = df.T
df2

df2["향단"]

# Pandas는 데이터 파일을 읽어 데이터프레임을 만들 수 있음
# CSV, Excel, HTML, JSON, HDF5, SAS, STATA, SQL

# CSV(Comman Saparated Value) 포맷 입출력, 데이터 값이 쉼표(,)로 구분되는 텍스트 파일

# %%writefile 명령

# 샘플 데이터로 사용할 CSV 파일을 %%writefile 매직(magic)명령으로 만들기
# 이 명령은 셀에서 서술한 내용대로 텍스트 파일을 만드는 명령

# Commented out IPython magic to ensure Python compatibility.
# %%writefile sample1.csv
# c1, c2, c3
# 1, 1.11, one
# 2, 2.22, two
# 3, 3.33, three

# CSV 파일 입력
# : CSV 파일로부터 데이터를 읽어 데이터프레임을 만들 때는 pandas.read_csv 함수 사용
# 함수의 입력값으로 파일 이름을 넣음

pd.read_csv('sample1.csv')

# 열 인덱스는 있지만, 행 인덱스 정보가 없어 0부터 시작하는 정수 인덱스가 자동으로 추가
# 만약 데이터 파일에 열 인덱스 정보가 없는 경우 read_csv 명령의 names 인수 설정

# Commented out IPython magic to ensure Python compatibility.
# %%writefile sample2.csv
# 1, 1.11, one
# 2, 2.22, two
# 3, 3.33, three

pd.read_csv('sample2.csv', names=['c1','c2', 'c3'])

# 만약 테이블 내의 특정한 열을 행 인덱스로 지정하고 싶으면 index_col 인수를 사용

pd.read_csv('sample1.csv', index_col='c1')

# 확장자가 CSV가 아닌 파일, 데이터를 구분하는 구분자(separator)가 쉼표가 아니면, sep 인수를 씀
# 만약 길이가 정해지지 않은 공백이 구분자인 경우에는 정규식(regular expression)문자열 사용

# Commented out IPython magic to ensure Python compatibility.
# %%writefile sample3.txt
# 
# c1        c2        c3        c4
# 0.179181 -1.538472  1.347553  0.43381
# 1.024209  0.087307 -1.281997  0.49265
# 0.417899 -2.002308  0.255245 -1.10515

pd.read_table('sample3.txt', sep='\s+')

#만약 자료 파일 중에 건너 뛰어야 할 행 있으면 skiprows 인수를 사용

# Commented out IPython magic to ensure Python compatibility.
# %%writefile sample4.txt
# 파일 제목 : sample4.txt
# 데이터 포맷의 설명 :
# c1, c2, c3
# 1, 1.11, one
# 2, 2.22, two
# 3, 3.33, three

pd.read_csv('sample4.txt', skiprows=[0,1])

pd.read_csv('sample4.txt', skiprows=[0])

# 특정한 값을 NaN 으로 취급하고 싶으면 na_values 인수에 NaN 값으로 취급할 값 넣음

# Commented out IPython magic to ensure Python compatibility.
# %%writefile sample5.csv
# c1, c2, c3
# 1, 1.11, one
# 2, ,two
# 누락, 3.33, three

df = pd.read_csv('sample5.csv', na_values=['누락'])
df

# csv 파일 출력

# 파이썬의 데이터프레임 값을 csv파일로 출력하고 싶으면 to_csv 메서드 사용

df.to_csv('sample6.csv')

# 리눅스나 맥에서는 cat 셸 명령으로 파일의 내용을 확인할 수 있음
# 윈도우에서는 type 함수를 사용한다. 느낌표(!)는 셸 함수를 사용하기 위한 아이파이썬 매직 명령

!cat sample6.csv  #윈도우 에서는 !type sample6.csv 함수 사용

# 파일 읽을 때와 마찬가지로 출력할 때도 sep 인수로 구분자를 바꿈

df.to_csv('sample7.txt', sep='|')

!cat sample7.txt

# na_rep 인수로 NaN 표시값을 바꿀 수 있음

df.to_csv('sample8.csv', na_rep='누락')

!cat sample8.csv

# index, header 인수를 지정하여 인덱스 및 헤더 출력 여부를 지정하는 것 가능

df.index = ["a","b","c"]
df

df.to_csv('sample9.csv', index=False, header=False)

!cat sample9.csv

# 인터넷 상의 CSV 파일 입력

# 웹상에는 다양한 데이터 파일이 CSV 파일 형태로 제공됨
# read_csv 명령 사용시 파일 패스 대신 URL을 지정하면 Pandas가 직접 해당 파일을 다운로드 하여 읽음

df = pd.read_csv("https://raw.githubusercontent.com/datascienceschool/docker_rpython/master/data/titanic.csv")

# 위의 데이터 프레임 데이터 갯수, 행의 갯수가 890개가 넘어감
# 데이터가 많을 경우, 데이터프레임의 표현은 데이터 앞,뒤 일부분만 보여줌
# 보여줄 행의 수는 display.max_rows 옵션으로 정함

pd.set_option("display.max_rows",20) # 앞 뒤로 모두 20행만 보여줌
df

# 앞이나 뒤의 특정 갯수만 보고 싶다면 head 메서드나 tail 메서드를 이용
# 메서드 인수로 출력할 행의 수를 넣을 수 있음

df.head()

df.tail(2)

# 인터넷 상의 데이터 베이스 자료 입력

# pandas_datareader 패키지의 DataReader을 사용하면 일부 인터넷 사이트의 자료를 바로 pandas로 읽을 수 있음
# pandas_datareader 패키지는 판다스와 별도로 설치 해야함

import datetime
dt_start = datetime.datetime(2015,1,1)
dt_end = "2016, 6, 30"

# data_source 인수로 데이터를 읽어올 웹 사이트 지정, 
# 데이터의 코드는 웹 사이트에서 검색하여 알아냄

import pandas_datareader as pdr

gdp = pdr.get_data_fred('GDP', dt_start, dt_end)
gdp.tail()

# 데이터 코드에 리스트를 넣으면 여러개의 데이터를 동시에 가져옴

inflation = pdr.get_data_fred(["CPIAUCSL", "CPILFESL"], dt_start, dt_end)
inflation.tail()

